{
  "name": "journey",
  "description": "liberal JSON-only HTTP request routing for node",
  "url": "http://cloudhead.io/journey",
  "keywords": [
    "http",
    "router",
    "json"
  ],
  "author": {
    "name": "Alexis Sellier",
    "email": "self@cloudhead.net"
  },
  "contributors": [],
  "licenses": [
    "Apache 2.0"
  ],
  "dependencies": {},
  "lib": "lib",
  "main": "./lib/journey",
  "version": "0.4.0-pre-3",
  "directories": {
    "test": "./test"
  },
  "engines": {
    "node": "> 0.2.6"
  },
  "readme": "journey\n=======\n\n> liberal JSON-only HTTP request routing for node.\n\nintroduction\n------------\n\nJourney's goal is to provide a *fast* and *flexible* *RFC 2616 compliant* request router\nfor *JSON* consuming clients.\n\nsynopsis\n--------\n\n    var journey = require('journey');\n\n    //\n    // Create a Router\n    //\n    var router = new(journey.Router);\n\n    // Create the routing table\n    router.map(function () {\n        this.root.bind(function (req, res) { res.send(\"Welcome\") });\n        this.get(/^trolls\\/([0-9]+)$/).bind(function (req, res, id) {\n            database('trolls').get(id, function (doc) {\n                res.send(200, {}, doc);\n            });\n        });\n        this.post('/trolls').bind(function (req, res, data) {\n            sys.puts(data.type); // \"Cave-Troll\"\n            res.send(200);\n        });\n    });\n\n    require('http').createServer(function (request, response) {\n        var body = \"\";\n\n        request.addListener('data', function (chunk) { body += chunk });\n        request.addListener('end', function () {\n            //\n            // Dispatch the request to the router\n            //\n            router.handle(request, body, function (result) {\n                response.writeHead(result.status, result.headers);\n                response.end(result.body);\n            });\n        });\n    }).listen(8080);\n\ninstallation\n------------\n\n    $ npm install journey\n\nAPI\n---\n\nYou create a router with the `journey.Router` constructor:\n\n    var router = new(journey.Router);\n\nYou define some routes, with bound functions:\n\n    router.get('/hello').bind(function (req, res) { res.send('Hi there!') });\n    router.put('/candles').bind(function (req, res) { ... });\n\n*Note that you may also use the `map` function to define routes.*\n\nThe `router` object exposes a `handle` method, which takes three arguments:\nan `http.ServerRequest` instance, a body, and a callback, as such:\n\n    function route(request, body, callback)\n\nand asynchronously calls the callback with an object containing the response\nheaders, status and body, on the first matching route:\n\n    { status: 200,\n      headers: {\"Content-Type\":\"application/json\"},\n      body: '{\"journey\":\"Welcome\"}'\n    }\n\nNote that the response body will either be JSON data, or empty.\n\n### Routes #\n\nHere are a couple of example routes:\n\n    // route                                // matching request\n    router.get('/users')                    // GET    /users\n    router.post('/users')                   // POST   /users\n    router.del(/^users\\/(\\d+)$/)            // DELETE /users/45\n    router.put(/^users\\/(\\d+)$/)            // PUT    /users/45\n\n    router.route('/articles')               // *           /articles\n    router.route('POST',          '/users') // POST        /users\n    router.route(['POST', 'PUT'], '/users') // POST or PUT /users\n\n    router.root                             // GET /\n    router.any                              // Matches all request\n    router.post('/', {                      // Only match POST requests to /\n        assert: function (req) {         // with data in the body.\n            return req.body.length > 0;\n        }\n    });\n\nAny of these routes can be bound to a function or object which responds\nto the `apply` method. We use `bind` for that:\n\n    router.get('/hello').bind(function (req, res) {});\n\nIf there is a match, the bound function is called, and passed the `response` object,\nas first argument. Calling the `send` method on this object will trigger the callback,\npassing the response to it:\n\n    router.get('/hello').bind(function (req, res) {\n        res.send(200, {}, {hello: \"world\"});\n    });\n\nThe send method is pretty flexible, here are a couple of examples:\n\n                                // status, headers, body\n    res.send(404);              // 404     {}       ''\n    res.send(\"Welcome\");        // 200     {}       '{\"journey\":\"Welcome\"}'\n    res.send({hello:\"world\"});  // 200     {}       '{\"hello\":\"world\"}'\n\n    res.send(200, {\"Server\":\"HAL/1.0\"}, [\"bob\"]);\n\nAs you can see, the body is automatically converted to JSON, and if a string is passed,\nit acts as a message from `journey`. To send a raw string back, you can use the `sendBody` method:\n\n    res.sendBody(JSON.stringify({hello:\"world\"}));\n\nThis will bypass JSON conversion.\n\n### URL parameters #\n\nConsider a request such as `GET /users?limit=5`, I can get the url params like this:\n\n    router.get('/users').bind(function (req, res, params) {\n        params.limit; // 5\n    });\n\nHow about a `POST` request, with form data, or JSON? Same thing, journey will parse the data,\nand pass it as the last argument to the bound function.\n\n### Capture groups #\n\nAny captured data on a matched route gets passed as arguments to the bound function, so let's\nsay we have a request like `GET /trolls/42`, and the following route:\n\n    get(/^([a-z]+)\\/([0-9]+)$/)\n\nHere's how we can access the captures:\n\n    router.get(/^([a-z]+)\\/([0-9]+)$/).bind(function (req, res, resource, id, params) {\n        res;      // response object\n        resource; // \"trolls\"\n        id;       // 42\n        params;   // {}\n    });\n\n### Summary #\n\nA bound function has the following template:\n\n    function (request, responder, [capture1, capture2, ...], data/params)\n\n### Paths #\n\nSometimes it's useful to have a bunch of routes under a single namespace, that's what the `path` function does.\nConsider the following path and unbound routes:\n\n    router.path('/domain', function () {\n        this.get();        // match 'GET /domain'\n        this.root;         // match 'GET /domain/'\n        this.get('/info'); // match 'GET /domain/info'\n\n        this.path('/users', function () {\n            this.post();   // match 'POST /domain/users'\n            this.get();    // match 'GET  /domain/users'\n        });\n    })\n\n### Filters #\n\nOften it's convenient to disallow certain requests based on predefined criteria. A great example of this is Authorization:\n\n    function authorize (request, body, cb) {\n      return request.headers.authorized === true\n          ? cb(null)\n          : cb(new journey.NotAuthorized('Not Authorized'));\n    }\n\n    function authorizeAdmin (request, body, cb) {\n      return request.headers.admin === true\n          ? cb(null)\n          : cb(new journey.NotAuthorized('Not Admin'));\n    }\n\nJourney exposes this in three separate location through the `filter` API:\n\n#### Set a global filter\n\n    var router = new(journey.Router)({ filter: authorize });\n\n*Note: This filter will not actually be enforced until you use the APIs exposed in (2) and (3)*\n\n#### Set a scoped filter in your route function\n\n    var router = new(journey.Router)({ filter: authorize });\n\n    router.map(function () {\n        this.filter(function () {\n            //\n            // Routes in this scope will use the 'authorize' function\n            //\n        });\n\n        this.filter(authorizeAdmin, function () {\n            //\n            // Routes in this scope will use the 'authorizeAdmin' function\n            //\n        });\n    });\n\n#### Set a filter on an individual route\n\n    var router = new(journey.Router)({ filter: authorize });\n\n    router.map(function () {\n        this.get('/authorized').filter().bind(function (req, res, params) {\n            //\n            // This route will be filtered using the 'authorize' function\n            //\n        });\n\n        this.get('/admin').filter(authorizeAdmin).bind(function (req, res, params) {\n            //\n            // This route will be filtered using the 'authorizeAdmin' function\n            //\n        });\n    });\n\n### Accessing the request object #\n\nFrom a bound function, you can access the request object with `this.request`, consider\na request such as `POST /articles`, and a route:\n\n    router.route('/articles').bind(function (req, res) {\n        this.request.method; // \"POST\"\n        res.send(\"Thanks for your \" + this.request.method + \" request.\");\n    });\n\nlicense\n-------\n\nReleased under the Apache License 2.0\n\nSee `LICENSE` file.\n\nCopyright (c) 2010 Alexis Sellier\n\n\n",
  "readmeFilename": "README.md",
  "_id": "journey@0.4.0-pre-3",
  "dist": {
    "shasum": "9d3e86259ae62d29451c8a9286a8abb29bae9172"
  },
  "_from": "journey@",
  "_resolved": "https://registry.npmjs.org/journey/-/journey-0.4.0-pre-3.tgz"
}
